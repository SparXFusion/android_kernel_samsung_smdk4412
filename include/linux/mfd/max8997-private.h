/*
 * max8997-private.h - Voltage regulator driver for the Maxim 8997
 *
 *  Copyright (C) 2009-2010 Samsung Electrnoics
 *
 *  based on max8998-private.h
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

#ifndef __LINUX_MFD_MAX8997_PRIV_H
#define __LINUX_MFD_MAX8997_PRIV_H

#define MAX8997_NUM_IRQ_PMIC_REGS	4
#define MAX8997_NUM_IRQ_MUIC_REGS	3
#define MAX8997_NUM_IRQ_REGS		(MAX8997_NUM_IRQ_PMIC_REGS +\
					 MAX8997_NUM_IRQ_MUIC_REGS)

/* MAX 8997 PMIC registers */
enum max8997_pmic_reg {
	MAX8997_REG_ID		= 0x00,
	MAX8997_REG_VER		= 0x01,
	MAX8997_REG_IRQ_SOURCE	= 0x02,
	MAX8997_REG_IRQ1	= 0x03,
	MAX8997_REG_IRQ2	= 0x04,
	MAX8997_REG_IRQ3	= 0x05,
	MAX8997_REG_IRQ4	= 0x06,

	MAX8997_REG_IRQM1	= 0x08,
	MAX8997_REG_IRQM2	= 0x09,
	MAX8997_REG_IRQM3	= 0x0a,
	MAX8997_REG_IRQM4	= 0x0b,

	MAX8997_REG_STATUS1	= 0x0d,
	MAX8997_REG_STATUS2	= 0x0e,
	MAX8997_REG_STATUS3	= 0x0f,
	MAX8997_REG_STATUS4	= 0x10,

	MAX8997_REG_MAINCON1	= 0x13,
	MAX8997_REG_MAINCON2	= 0x14,
	MAX8997_REG_BUCKRAMP	= 0x15,

	MAX8997_REG_BUCK1CTRL	= 0x18,
	MAX8997_REG_BUCK1DVS1	= 0x19,
	MAX8997_REG_BUCK1DVS2	= 0x1a,
	MAX8997_REG_BUCK1DVS3	= 0x1b,
	MAX8997_REG_BUCK1DVS4	= 0x1c,
	MAX8997_REG_BUCK1DVS5	= 0x1d,
	MAX8997_REG_BUCK1DVS6	= 0x1e,
	MAX8997_REG_BUCK1DVS7	= 0x1f,
	MAX8997_REG_BUCK1DVS8	= 0x20,
	MAX8997_REG_BUCK2CTRL	= 0x21,
	MAX8997_REG_BUCK2DVS1	= 0x22,
	MAX8997_REG_BUCK2DVS2	= 0x23,
	MAX8997_REG_BUCK2DVS3	= 0x24,
	MAX8997_REG_BUCK2DVS4	= 0x25,
	MAX8997_REG_BUCK2DVS5	= 0x26,
	MAX8997_REG_BUCK2DVS6	= 0x27,
	MAX8997_REG_BUCK2DVS7	= 0x28,
	MAX8997_REG_BUCK2DVS8	= 0x29,
	MAX8997_REG_BUCK3CTRL	= 0x2a,
	MAX8997_REG_BUCK3DVS	= 0x2b,
	MAX8997_REG_BUCK4CTRL	= 0x2c,
	MAX8997_REG_BUCK4DVS	= 0x2d,
	MAX8997_REG_BUCK5CTRL	= 0x2e,
	MAX8997_REG_BUCK5DVS1	= 0x2f,
	MAX8997_REG_BUCK5DVS2	= 0x30,
	MAX8997_REG_BUCK5DVS3	= 0x31,
	MAX8997_REG_BUCK5DVS4	= 0x32,
	MAX8997_REG_BUCK5DVS5	= 0x33,
	MAX8997_REG_BUCK5DVS6	= 0x34,
	MAX8997_REG_BUCK5DVS7	= 0x35,
	MAX8997_REG_BUCK5DVS8	= 0x36,
	MAX8997_REG_BUCK6CTRL	= 0x37,
	MAX8997_REG_BUCK6BPSKIPCTRL	= 0x38,
	MAX8997_REG_BUCK7CTRL	= 0x39,
	MAX8997_REG_BUCK7DVS	= 0x3a,
	MAX8997_REG_LDO1CTRL	= 0x3b,
	MAX8997_REG_LDO2CTRL	= 0x3c,
	MAX8997_REG_LDO3CTRL	= 0x3d,
	MAX8997_REG_LDO4CTRL	= 0x3e,
	MAX8997_REG_LDO5CTRL	= 0x3f,
	MAX8997_REG_LDO6CTRL	= 0x40,
	MAX8997_REG_LDO7CTRL	= 0x41,
	MAX8997_REG_LDO8CTRL	= 0x42,
	MAX8997_REG_LDO9CTRL	= 0x43,
	MAX8997_REG_LDO10CTRL	= 0x44,
	MAX8997_REG_LDO11CTRL	= 0x45,
	MAX8997_REG_LDO12CTRL	= 0x46,
	MAX8997_REG_LDO13CTRL	= 0x47,
	MAX8997_REG_LDO14CTRL	= 0x48,
	MAX8997_REG_LDO15CTRL	= 0x49,
	MAX8997_REG_LDO16CTRL	= 0x4a,
	MAX8997_REG_LDO17CTRL	= 0x4b,
	MAX8997_REG_LDO18CTRL	= 0x4c,
	MAX8997_REG_LDO21CTRL	= 0x4d,

	MAX8997_REG_MBCCTRL1	= 0x50,
	MAX8997_REG_MBCCTRL2	= 0x51,
	MAX8997_REG_MBCCTRL3	= 0x52,
	MAX8997_REG_MBCCTRL4	= 0x53,
	MAX8997_REG_MBCCTRL5	= 0x54,
	MAX8997_REG_MBCCTRL6	= 0x55,
	MAX8997_REG_OTPCGHCVS	= 0x56,

	MAX8997_REG_SAFEOUTCTRL	= 0x5a,

	MAX8997_REG_LBCNFG1	= 0x5e,
	MAX8997_REG_LBCNFG2	= 0x5f,
	MAX8997_REG_BBCCTRL	= 0x60,

	MAX8997_REG_FLASH1_CUR	= 0x63, /* 0x63 ~ 0x6e for FLASH */
	MAX8997_REG_FLASH2_CUR	= 0x64,
	MAX8997_REG_MOVIE_CUR	= 0x65,
	MAX8997_REG_GSMB_CUR	= 0x66,
	MAX8997_REG_BOOST_CNTL	= 0x67,
	MAX8997_REG_LEN_CNTL	= 0x68,
	MAX8997_REG_FLASH_CNTL	= 0x69,
	MAX8997_REG_WDT_CNTL	= 0x6a,
	MAX8997_REG_MAXFLASH1	= 0x6b,
	MAX8997_REG_MAXFLASH2	= 0x6c,
	MAX8997_REG_FLASH_STATUS	= 0x6d,
	MAX8997_REG_FLASH_STATUS_MASK	= 0x6e,

	MAX8997_REG_GPIOCNTL1	= 0x70,
	MAX8997_REG_GPIOCNTL2	= 0x71,
	MAX8997_REG_GPIOCNTL3	= 0x72,
	MAX8997_REG_GPIOCNTL4	= 0x73,
	MAX8997_REG_GPIOCNTL5	= 0x74,
	MAX8997_REG_GPIOCNTL6	= 0x75,
	MAX8997_REG_GPIOCNTL7	= 0x76,
	MAX8997_REG_GPIOCNTL8	= 0x77,
	MAX8997_REG_GPIOCNTL9	= 0x78,
	MAX8997_REG_GPIOCNTL10	= 0x79,
	MAX8997_REG_GPIOCNTL11	= 0x7a,
	MAX8997_REG_GPIOCNTL12	= 0x7b,

	MAX8997_REG_LDO1CONFIG	= 0x80,
	MAX8997_REG_LDO2CONFIG	= 0x81,
	MAX8997_REG_LDO3CONFIG	= 0x82,
	MAX8997_REG_LDO4CONFIG	= 0x83,
	MAX8997_REG_LDO5CONFIG	= 0x84,
	MAX8997_REG_LDO6CONFIG	= 0x85,
	MAX8997_REG_LDO7CONFIG	= 0x86,
	MAX8997_REG_LDO8CONFIG	= 0x87,
	MAX8997_REG_LDO9CONFIG	= 0x88,
	MAX8997_REG_LDO10CONFIG	= 0x89,
	MAX8997_REG_LDO11CONFIG	= 0x8a,
	MAX8997_REG_LDO12CONFIG	= 0x8b,
	MAX8997_REG_LDO13CONFIG	= 0x8c,
	MAX8997_REG_LDO14CONFIG	= 0x8d,
	MAX8997_REG_LDO15CONFIG	= 0x8e,
	MAX8997_REG_LDO16CONFIG	= 0x8f,
	MAX8997_REG_LDO17CONFIG	= 0x90,
	MAX8997_REG_LDO18CONFIG	= 0x91,
	MAX8997_REG_LDO21CONFIG	= 0x92,

	MAX8997_REG_DVSOKTIMER1	= 0x97,
	MAX8997_REG_DVSOKTIMER2	= 0x98,
	MAX8997_REG_DVSOKTIMER4	= 0x99,
	MAX8997_REG_DVSOKTIMER5	= 0x9a,

	MAX8997_REG_PMIC_END	= 0x9b,
};

/* MAX8997 MUIC registers */
enum max8997_muic_reg {
	MAX8997_MUIC_REG_ID		= 0x0,
	MAX8997_MUIC_REG_INT1		= 0x1,
	MAX8997_MUIC_REG_INT2		= 0x2,
	MAX8997_MUIC_REG_INT3		= 0x3,
	MAX8997_MUIC_REG_STATUS1	= 0x4,
	MAX8997_MUIC_REG_STATUS2	= 0x5,
	MAX8997_MUIC_REG_STATUS3	= 0x6,
	MAX8997_MUIC_REG_INTMASK1	= 0x7,
	MAX8997_MUIC_REG_INTMASK2	= 0x8,
	MAX8997_MUIC_REG_INTMASK3	= 0x9,
	MAX8997_MUIC_REG_CDETCTRL	= 0xa,

	MAX8997_MUIC_REG_CTRL1		= 0xc,
	MAX8997_MUIC_REG_CTRL2		= 0xd,
	MAX8997_MUIC_REG_CTRL3		= 0xe,

	MAX8997_MUIC_REG_END		= 0xf,
};

enum max8997_haptic_reg {
	MAX8997_HAPTIC_REG_GENERAL      = 0x00,
	MAX8997_HAPTIC_REG_CONF1        = 0x01,
	MAX8997_HAPTIC_REG_CONF2        = 0x02,
	MAX8997_HAPTIC_REG_DRVCONF      = 0x03,
	MAX8997_HAPTIC_REG_CYCLECONF1   = 0x04,
	MAX8997_HAPTIC_REG_CYCLECONF2   = 0x05,
	MAX8997_HAPTIC_REG_SIGCONF1     = 0x06,
	MAX8997_HAPTIC_REG_SIGCONF2     = 0x07,
	MAX8997_HAPTIC_REG_SIGCONF3     = 0x08,
	MAX8997_HAPTIC_REG_SIGCONF4     = 0x09,
	MAX8997_HAPTIC_REG_SIGDC1       = 0x0a,
	MAX8997_HAPTIC_REG_SIGDC2       = 0x0b,
	MAX8997_HAPTIC_REG_SIGPWMDC1    = 0x0c,
	MAX8997_HAPTIC_REG_SIGPWMDC2    = 0x0d,
	MAX8997_HAPTIC_REG_SIGPWMDC3    = 0x0e,
	MAX8997_HAPTIC_REG_SIGPWMDC4    = 0x0f,
	MAX8997_HAPTIC_REG_MTR_REV      = 0x10,

	MAX8997_HAPTIC_REG_END          = 0x11,
};

/* IRQ definitions */
/* The interrupts for board specific purporse are only 18. */
/* refer arch/arm/mach-s5pv310/include/mach/irqs.h */
enum {
	/* PMIC / RTC */
	/** IRQ1 **/
	MAX8997_IRQ_PWRONR,
	MAX8997_IRQ_PWRONF,
	MAX8997_IRQ_PWRON1SEC,
	MAX8997_IRQ_JIGONR,
	MAX8997_IRQ_JIGONF,
	MAX8997_IRQ_LOWBAT2,
	MAX8997_IRQ_LOWBAT1,
	/** IRQ2 **/
	MAX8997_IRQ_JIGR,
	MAX8997_IRQ_JIGF,
	MAX8997_IRQ_MR,
	MAX8997_IRQ_DVS1OK,
	MAX8997_IRQ_DVS2OK,
	MAX8997_IRQ_DVS4OK,
	MAX8997_IRQ_DVS5OK,
	/** IRQ3 **/
	MAX8997_IRQ_CHGINS,
	MAX8997_IRQ_CHGRM,
	MAX8997_IRQ_DCINOVP,
	MAX8997_IRQ_TOPOFF,
	MAX8997_IRQ_CHGRSTF,
	MAX8997_IRQ_MBCHGTMEXPD,
	/** IRQ4 **/
	MAX8997_IRQ_RTC60S,
	MAX8997_IRQ_RTCA1,
	MAX8997_IRQ_RTCA2,
	MAX8997_IRQ_SMPL_INT,
	MAX8997_IRQ_RTC1S,
	MAX8997_IRQ_WTSR,
	/* MUIC */
	/** IRQ1 **/
	MAX8997_IRQ_ADC,
	MAX8997_IRQ_ADCLOW,
	MAX8997_IRQ_ADCERR,
	/** IRQ2 **/
	MAX8997_IRQ_CHGTYP,
	MAX8997_IRQ_CHGDETRUN,
	MAX8997_IRQ_DCDTMR,
	MAX8997_IRQ_DBCHG,
	MAX8997_IRQ_VBVOLT,
	/** IRQ3 **/
	MAX8997_IRQ_OVP,

	MAX8997_IRQ_NR
};

/* MAX8997 various variants */
enum {
	TYPE_MAX8997 = 0, /* Default */
};

/* Interrupt source mask */
#define MAX8997_INTR_PMIC_MASK		(1 << 1)
#define MAX8997_INTR_FUELGAUGE_MASK	(1 << 2)
#define MAX8997_INTR_MUIC_MASK		(1 << 3)
#define MAX8997_INTR_GPIO_MASK		(1 << 4)
#define MAX8997_INTR_FLASH_MASK		(1 << 5)

/* PMIC / RTC interrupt mask */
#define MAX8997_IRQ_PWRONR_MASK		(1 << 0)
#define MAX8997_IRQ_PWRONF_MASK		(1 << 1)
#define MAX8997_IRQ_PWRON1SEC_MASK	(1 << 3)
#define MAX8997_IRQ_JIGONR_MASK		(1 << 4)
#define MAX8997_IRQ_JIGONF_MASK		(1 << 5)
#define MAX8997_IRQ_LOWBAT2_MASK	(1 << 6)
#define MAX8997_IRQ_LOWBAT1_MASK	(1 << 7)

#define MAX8997_IRQ_JIGR_MASK		(1 << 0)
#define MAX8997_IRQ_JIGF_MASK		(1 << 1)
#define MAX8997_IRQ_MR_MASK		(1 << 2)
#define MAX8997_IRQ_DVS1OK_MASK		(1 << 3)
#define MAX8997_IRQ_DVS2OK_MASK		(1 << 4)
#define MAX8997_IRQ_DVS4OK_MASK		(1 << 5)
#define MAX8997_IRQ_DVS5OK_MASK		(1 << 6)

#define MAX8997_IRQ_CHGINS_MASK		(1 << 0)
#define MAX8997_IRQ_CHGRM_MASK		(1 << 1)
#define MAX8997_IRQ_DCINOVP_MASK	(1 << 2)
#define MAX8997_IRQ_TOPOFF_MASK		(1 << 3)
#define MAX8997_IRQ_CHGRSTF_MASK	(1 << 5)
#define MAX8997_IRQ_MBCHGTMEXPD_MASK	(1 << 7)

#define MAX8997_IRQ_RTC60S_MASK		(1 << 0)
#define MAX8997_IRQ_RTCA1_MASK		(1 << 1)
#define MAX8997_IRQ_RTCA2_MASK		(1 << 2)
#define MAX8997_IRQ_SMPL_INT_MASK	(1 << 3)
#define MAX8997_IRQ_RTC1S_MASK		(1 << 4)
#define MAX8997_IRQ_WTSR_MASK		(1 << 5)

/* MUIC interrupt mask */
#define MAX8997_IRQ_ADC_MASK		(1 << 0)
#define MAX8997_IRQ_ADCLOW_MASK		(1 << 1)
#define MAX8997_IRQ_ADCERR_MASK		(1 << 2)

#define MAX8997_IRQ_CHGTYP_MASK		(1 << 0)
#define MAX8997_IRQ_CHGDETRUN_MASK	(1 << 1)
#define MAX8997_IRQ_DCDTMR_MASK		(1 << 2)
#define MAX8997_IRQ_DBCHG_MASK		(1 << 3)
#define MAX8997_IRQ_VBVOLT_MASK		(1 << 4)

#define MAX8997_IRQ_OVP_MASK		(1 << 2)

/* RAMP BUCKs register mask */
#define MAX8997_ENRAMPBUCK1		(1 << 4)
#define MAX8997_ENRAMPBUCK2		(1 << 5)
#define MAX8997_ENRAMPBUCK4		(1 << 6)
#define MAX8997_ENRAMPBUCK5		(1 << 7)

/* Flash LED register mask */
#define MAX8997_BOOST_EN_MASK		(1 << 6)
#define MAX8997_BOOST_EN_SHIFT		6
#define MAX8997_FLASH_EN_MASK		(7 << 0)
#define MAX8997_FLASH_EN_SHIFT		0
#define MAX8997_MOVIE_EN_MASK		(7 << 3)
#define MAX8997_MOVIE_EN_SHIFT		3

/**
 * struct max8997_dev - max8997 master device for sub-drivers
 * @dev: master device of the chip (can be used to access platform data)
 * @i2c: i2c client private data for regulator
 * @rtc: i2c client private data for rtc
 * @muic: i2c client private data for muic
 * @hmotor: i2c client private data for haptic motor
 * @iolock: mutex for serializing io access
 * @irqlock: mutex for buslock
 * @irq_base: base IRQ number for max8997, required for IRQs
 * @irq: generic IRQ number for max8997
 * @ono: power onoff IRQ number for max8997
 * @irq_masks_cur: currently active value
 * @irq_masks_cache: cached hardware value
 * @type: indicate which max8997 "variant" is used
 */
struct max8997_dev {
	struct device *dev;
	struct i2c_client *i2c;
	struct i2c_client *rtc;
	struct i2c_client *muic;
	struct i2c_client *hmotor;
	struct mutex iolock;
	struct mutex irqlock;

	int irq_base;
	int irq;
	int ono;
	u8 irq_masks_cur[MAX8997_NUM_IRQ_REGS];
	u8 irq_masks_cache[MAX8997_NUM_IRQ_REGS];
	int type;
	int wakeup;

	/* For hiberantion */
	u8 reg_dump[MAX8997_REG_PMIC_END + MAX8997_MUIC_REG_END +
		MAX8997_HAPTIC_REG_END];
};

int max8997_irq_init(struct max8997_dev *max8997);
void max8997_irq_exit(struct max8997_dev *max8997);

extern int max8997_read_reg(struct i2c_client *i2c, u8 reg, u8 *dest);
extern int max8997_bulk_read(struct i2c_client *i2c, u8 reg, int count,
		u8 *buf);
extern int max8997_write_reg(struct i2c_client *i2c, u8 reg, u8 value);
extern int max8997_bulk_write(struct i2c_client *i2c, u8 reg, int count,
		u8 *buf);
extern int max8997_update_reg(struct i2c_client *i2c, u8 reg, u8 val, u8 mask);

#endif /*  __LINUX_MFD_MAX8997_PRIV_H */

